---
AWSTemplateFormatVersion: '2010-09-09'

Description: Puppet Module Metadata Service Stack

Parameters:

  BucketName:
    Type: String
    Description: The name of the S3 Bucket to create

  LambdaS3BucketName:
    Type: String
    # TODO Remove this
    Default: puppet-module-metadata-sourcefiles
    Description: S3 Bucket Name holding the Lambda Function Package

  LambdaZipfileName:
    Type: String
    Default: functions.zip
    Description: S3 Key to the Lambda Function Package

  LambdaMemorySize:
    Type: Number
    Description: The Lambda Function Memory Size
    Default: 512
    MinValue: 128
    MaxValue: 3008

  LambdaTimeout:
    Type: Number
    Description: The Lambda Function Timeout in Seconds
    Default: 60
    MinValue: 30
    MaxValue: 900

  SQSBatchSize:
    Type: Number
    Description: The number of SQS Messages to send to the Lambda Function
    Default: 1
    MinValue: 1
    MaxValue: 10

  APIDeploymentName:
    Type: String
    Default: puppet
    Description: The name of the RestAPI Deployment (and root url name)

Metadata:

  AWS::CloudFormation::Interface:
    ParameterLabels:
      BucketName:
        default: S3 Bucket Name

Resources:

  # From Simple-S3Bucket-SNS.yaml
  S3Bucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - SNSTopicPolicy
    Properties:
      # Need to define a static BucketName due to a circular dependency with the AWS::SNS::TopicPolicy
      BucketName: !Ref BucketName
      AccessControl: BucketOwnerFullControl
      LoggingConfiguration:
        DestinationBucketName: !Ref S3BucketLogs
        LogFilePrefix: !Sub '/logs/${BucketName}/'
      NotificationConfiguration:
        TopicConfigurations:
          -
            Event: s3:ObjectCreated:Put
            Topic: !Ref SNSTopic
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        -
          Key: Description
          Value: Object Storage
        -
          Key: StackId
          Value: !Ref AWS::StackId
      VersioningConfiguration:
        Status: Enabled

  SNSTopic:
    Type: AWS::SNS::Topic

  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref SNSTopic
      PolicyDocument:
        Id: SNSTopicPolicy
        Version: '2012-10-17'
        Statement:
          -
            Sid: S3TriggerAccess
            Effect: Allow
            Principal:
              AWS:
                - '*'
            Action:
              - sns:Publish
            Resource:
              - !Ref SNSTopic
            Condition:
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:s3:::${BucketName}"
          # If you do not require cross-account subscriptions, this Policy can be removed
          # -
          #   Sid: CrossAccountSubscriptionAccess
          #   Effect: Allow
          #   Principal:
          #     AWS:
          #       # List of AWS Accounts for cross-account subscriptions
          #       - !Sub 'arn:aws:iam::123456789012:root'
          #   Action:
          #     - sns:Subscribe
          #     - sns:Receive
          #     - sns:ListSubscriptionsByTopic
          #   Resource:
          #     - !Ref SNSTopic

  # If a source AWS Account is going to put objects into the Bucket, keep this resource,
  # if not, this BucketPolicy can be removed.
  # S3BucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref S3Bucket
  #     PolicyDocument:
  #       Statement:
  #         -
  #           Sid: PutObjectAccess
  #           Action:
  #             - s3:PutObject
  #           Effect: Allow
  #           Principal:
  #             AWS:
  #               - '123456789012' # Replace with a valid source AWS Account Id
  #           Resource:
  #             - !Sub "arn:aws:s3:::${BucketName}"

  S3BucketLogs:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      LifecycleConfiguration:
        Rules:
          -
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
            Status: Enabled
            Transitions:
              -
                StorageClass: GLACIER
                TransitionInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        -
          Key: Description
          Value: S3 Access Logs
        -
          Key: StackId
          Value: !Ref AWS::StackId

  # From SQS-SNS-Subscription.yaml

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 180
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        -
          Key: StackId
          Value: !Ref AWS::StackId

  SQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SQSQueue
      PolicyDocument:
        Id: AllowIncomingAccess
        Statement:
          -
            Effect: Allow
            Principal:
              AWS:
                - !Ref AWS::AccountId
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
            Resource:
              - !GetAtt SQSQueue.Arn
          -
            Effect: Allow
            Principal: '*'
            Action:
              - sqs:SendMessage
            Resource:
              - !GetAtt SQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref SNSTopic

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 160
      Tags:
        -
          Key: StackId
          Value: !Ref AWS::StackId

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SNSTopic
      Endpoint: !GetAtt SQSQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true

  SQSQueueAgeOfOldestMessage:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: SQSQueue_AgeOfOldestMessage
      AlarmDescription: Alarms if the SQS Queue has messages in it for too long
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt SQSQueue.QueueName
      DatapointsToAlarm: 2
      EvaluationPeriods: 3
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: AWS/SQS
      Period: 300
      Statistic: Maximum
      Threshold: 30
      TreatMissingData: notBreaching
      Unit: Seconds

  DeadLetterQueueApproximateNumberOfMessagesVisible:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: DeadLetterQueue_ApproximateNumberOfMessagesVisible
      AlarmDescription: Alarms if the Dead Letter Queue has too many messages
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DeadLetterQueue.QueueName
      DatapointsToAlarm: 2
      EvaluationPeriods: 3
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Maximum
      Threshold: 1
      TreatMissingData: notBreaching

  # From Lambda-SQS-Trigger.yaml

  ExtractFromForgeFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaS3BucketName
        S3Key: !Ref LambdaZipfileName
      Description: Downloads and extracts forge module information
      Handler: extract_from_forge.process
      MemorySize: !Ref LambdaMemorySize
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: ruby2.5
      Timeout: !Ref LambdaTimeout

  LogGroup1:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ExtractFromForgeFunction}'
      RetentionInDays: 14

  # Allow API Gateway to call this function
  ExtractFromForgePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ExtractFromForgeFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      # SourceARN: <Should add the Arn for the API Gateway call

  GetModuleMetadataFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaS3BucketName
        S3Key: !Ref LambdaZipfileName
      Description: Returns or queues module metadata information
      Handler: get_module_metadata.process
      MemorySize: !Ref LambdaMemorySize
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: ruby2.5
      Timeout: !Ref LambdaTimeout
      Environment:
        Variables:
          S3Bucket: !Ref S3Bucket

  LogGroup2:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetModuleMetadataFunction}'
      RetentionInDays: 14

  # Allow API Gateway to call this function
  GetModuleMetadataPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt GetModuleMetadataFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      # SourceARN: <Should add the Arn for the API Gateway call

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LambdaRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:ListBucket
                  - s3:PutObject*
                  - s3:DeleteObject*
                Resource:
                  - !GetAtt S3Bucket.Arn
                  - !Sub '${S3Bucket.Arn}/*'
              -
                Effect: Allow
                Action:
                  - sqs:GetQueueAttributes
                  - sqs:DeleteMessage
                  - sqs:ReceiveMessage
                Resource: !GetAtt SQSQueue.Arn

  SQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - LogGroup1
    Properties:
      BatchSize: !Ref SQSBatchSize
      Enabled: true
      EventSourceArn: !GetAtt SQSQueue.Arn
      FunctionName: !Ref ExtractFromForgeFunction

  # API Gateway specification
  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Puppet Module Metadata API Gateway
      Description: Puppet Module Metadata API Gateway
      # OpenAPI (Swagger) Spec for the API
      Body:
        swagger: '2.0'
        info:
          description: A simple API to retrieve metadata information about Puppet and Modules
          version: 1.0.0
          title: Puppet Metadata Service
          license:
            name: MIT
            url: https://opensource.org/licenses/MIT
        paths:
          /module:
            get:
              summary: Retrieve Puppet Module metadata
              operationId: moduleMetadata
              description: |
                Retrieves and or queues retrival of metadata about a Puppet Module from the Puppet Forge
              produces:
              - application/json
              parameters:
              - in: query
                name: author
                description: The name of the module author on the Forge e.g. puppetlabs
                required: true
                type: string
              - in: query
                name: name
                description: The name of the module on the Forge e.g. stdlib
                required: true
                type: string
              - in: query
                name: version
                description: The version of the module on the Forge e.g. 5.0.1
                required: true
                type: string
              responses:
                "200":
                  description: Returns Module Metadata
                  schema:
                    type: array
                    items:
                      $ref: '#/definitions/ModuleMetadata'
                "202":
                  description: Module has been queued for processing
                "400":
                  description: Bad input parameter
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetModuleMetadataFunction.Arn}/invocations

        definitions:
          ModuleMetadata:
            type: object
            properties:
              metadata:
                type: object
                properties:
                  request_timestamp:
                    type: string
                    format: date-time
                  module_author:
                    type: string
                  module_name:
                    type: string
                  module_version:
                    type: string
                  extracted_timestamp:
                    type: string
                    format: date-time
              content:
                type: object
                properties:
                  readme:
                    type: string
                  metadata_json:
                    type: object
                  classes:
                    type: array
                    items:
                      $ref: '#/definitions/PuppetClass'
                  functions:
                    type: array
                    items:
                      $ref: '#/definitions/PuppetFunction'
                  types:
                    type: array
                    items:
                      $ref: '#/definitions/PuppetType'
          PuppetClass:
            required:
            - name
            properties:
              name:
                type: string
          PuppetFunction:
            required:
            - name
            properties:
              name:
                type: string
          PuppetType:
            required:
            - name
            properties:
              name:
                type: string

  RestAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestAPI
      Description: "Production Deployment"
      StageName: !Ref APIDeploymentName
      StageDescription:
        Description: Production Deployment Stage
        CachingEnabled: False
        Tags:
          -
            Key: StackId
            Value: !Ref AWS::StackId

Outputs:

  S3Bucket:
    Value: !Ref S3Bucket
    Description: S3 Bucket for object storage

  SNSTopicArn:
    Value: !Ref SNSTopic
    Description: SNS Topic for S3 Object Triggers

  SQSQueueArn:
    Value: !GetAtt SQSQueue.Arn

  InvokeURI:
    Value: !Sub https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/${APIDeploymentName}

